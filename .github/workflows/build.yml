name: Build
on:
  push:
    tags-ignore:
      - '*.*'
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # SonarCloud Access Token
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/steve-gombos/
  GITHUB_USER: steve-gombos
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official Nuget Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
  # Project Build settings
  CONFIGURATION: Release
  DOTNET: "3.1"
jobs:     
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install .NET ${{ env.DOTNET }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET }}
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test -c ${{ env.CONFIGURATION }} --no-restore -v normal --collect:"XPlat Code Coverage"
    - name: Pack
      if: matrix.os == 'ubuntu-latest'
      run: dotnet pack -c ${{ env.CONFIGURATION }} --no-build --no-restore -v normal --include-symbols --include-source -p:PackageVersion=$GITHUB_RUN_ID
    - name: Upload Artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: ./src/**/bin/Release/*.nupkg
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: /**/*coverage*.xml
        flags: ${{ matrix.os }},netcore${{ matrix.dotnet }}
  sonarscan:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: sonarscan-dotnet
      uses: highbyte/sonarscan-dotnet@1.0
      with:
        sonarProjectKey: steve-gombos_AutoGit
        sonarProjectName: AutoGit
        sonarOrganization: steve-gombos
        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: nupkg
      - name: Setup .NET ${{ env.DOTNET }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET }}			
          source-url: https://nuget.pkg.github.com/${{ env.GITHUB_USER }}/index.json
      - name: Push to GitHub Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source ${{ env.GITHUB_FEED }} --skip-duplicate
        env:
          NUGET_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET ${{ env.DOTNET }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET }}			
          source-url: https://nuget.pkg.github.com/${{ env.GITHUB_USER }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
      - name: Create Release NuGet package
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          dotnet pack -c ${{ env.CONFIGURATION }} -v normal --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg
      - name: Push to GitHub Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source ${{ env.GITHUB_FEED }} --skip-duplicate
      - name: Push to NuGet Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source ${{ env.NUGET_FEED }} --skip-duplicate --api-key ${{ env.NUGET_TOKEN }}
 
